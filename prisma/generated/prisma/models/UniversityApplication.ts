
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UniversityApplication` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UniversityApplication
 * 
 */
export type UniversityApplicationModel = runtime.Types.Result.DefaultSelection<Prisma.$UniversityApplicationPayload>

export type AggregateUniversityApplication = {
  _count: UniversityApplicationCountAggregateOutputType | null
  _avg: UniversityApplicationAvgAggregateOutputType | null
  _sum: UniversityApplicationSumAggregateOutputType | null
  _min: UniversityApplicationMinAggregateOutputType | null
  _max: UniversityApplicationMaxAggregateOutputType | null
}

export type UniversityApplicationAvgAggregateOutputType = {
  id: number | null
  nID: number | null
  graduationYear: number | null
  aggregateScore: runtime.Decimal | null
  guardianPhone: number | null
}

export type UniversityApplicationSumAggregateOutputType = {
  id: number | null
  nID: number | null
  graduationYear: number | null
  aggregateScore: runtime.Decimal | null
  guardianPhone: number | null
}

export type UniversityApplicationMinAggregateOutputType = {
  id: number | null
  firstName: string | null
  lastName: string | null
  email: string | null
  phone: string | null
  dateOfBirth: Date | null
  gender: $Enums.Gender | null
  singleStatus: $Enums.sStatus | null
  nationality: string | null
  nID: number | null
  province: string | null
  district: string | null
  sector: string | null
  cell: string | null
  village: string | null
  highSchool: string | null
  graduationYear: number | null
  combination: string | null
  aggregateScore: runtime.Decimal | null
  desiredUniveristy: string | null
  father: string | null
  mother: string | null
  guardianPhone: number | null
  relation: $Enums.Relationship | null
  disability: boolean | null
  specifyDisability: string | null
  status: $Enums.ApplicationStatus | null
  createdAt: Date | null
}

export type UniversityApplicationMaxAggregateOutputType = {
  id: number | null
  firstName: string | null
  lastName: string | null
  email: string | null
  phone: string | null
  dateOfBirth: Date | null
  gender: $Enums.Gender | null
  singleStatus: $Enums.sStatus | null
  nationality: string | null
  nID: number | null
  province: string | null
  district: string | null
  sector: string | null
  cell: string | null
  village: string | null
  highSchool: string | null
  graduationYear: number | null
  combination: string | null
  aggregateScore: runtime.Decimal | null
  desiredUniveristy: string | null
  father: string | null
  mother: string | null
  guardianPhone: number | null
  relation: $Enums.Relationship | null
  disability: boolean | null
  specifyDisability: string | null
  status: $Enums.ApplicationStatus | null
  createdAt: Date | null
}

export type UniversityApplicationCountAggregateOutputType = {
  id: number
  firstName: number
  lastName: number
  email: number
  phone: number
  dateOfBirth: number
  gender: number
  singleStatus: number
  nationality: number
  nID: number
  province: number
  district: number
  sector: number
  cell: number
  village: number
  highSchool: number
  graduationYear: number
  combination: number
  aggregateScore: number
  desiredUniveristy: number
  father: number
  mother: number
  guardianPhone: number
  relation: number
  disability: number
  specifyDisability: number
  status: number
  createdAt: number
  _all: number
}


export type UniversityApplicationAvgAggregateInputType = {
  id?: true
  nID?: true
  graduationYear?: true
  aggregateScore?: true
  guardianPhone?: true
}

export type UniversityApplicationSumAggregateInputType = {
  id?: true
  nID?: true
  graduationYear?: true
  aggregateScore?: true
  guardianPhone?: true
}

export type UniversityApplicationMinAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  email?: true
  phone?: true
  dateOfBirth?: true
  gender?: true
  singleStatus?: true
  nationality?: true
  nID?: true
  province?: true
  district?: true
  sector?: true
  cell?: true
  village?: true
  highSchool?: true
  graduationYear?: true
  combination?: true
  aggregateScore?: true
  desiredUniveristy?: true
  father?: true
  mother?: true
  guardianPhone?: true
  relation?: true
  disability?: true
  specifyDisability?: true
  status?: true
  createdAt?: true
}

export type UniversityApplicationMaxAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  email?: true
  phone?: true
  dateOfBirth?: true
  gender?: true
  singleStatus?: true
  nationality?: true
  nID?: true
  province?: true
  district?: true
  sector?: true
  cell?: true
  village?: true
  highSchool?: true
  graduationYear?: true
  combination?: true
  aggregateScore?: true
  desiredUniveristy?: true
  father?: true
  mother?: true
  guardianPhone?: true
  relation?: true
  disability?: true
  specifyDisability?: true
  status?: true
  createdAt?: true
}

export type UniversityApplicationCountAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  email?: true
  phone?: true
  dateOfBirth?: true
  gender?: true
  singleStatus?: true
  nationality?: true
  nID?: true
  province?: true
  district?: true
  sector?: true
  cell?: true
  village?: true
  highSchool?: true
  graduationYear?: true
  combination?: true
  aggregateScore?: true
  desiredUniveristy?: true
  father?: true
  mother?: true
  guardianPhone?: true
  relation?: true
  disability?: true
  specifyDisability?: true
  status?: true
  createdAt?: true
  _all?: true
}

export type UniversityApplicationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UniversityApplication to aggregate.
   */
  where?: Prisma.UniversityApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UniversityApplications to fetch.
   */
  orderBy?: Prisma.UniversityApplicationOrderByWithRelationInput | Prisma.UniversityApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UniversityApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UniversityApplications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UniversityApplications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UniversityApplications
  **/
  _count?: true | UniversityApplicationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UniversityApplicationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UniversityApplicationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UniversityApplicationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UniversityApplicationMaxAggregateInputType
}

export type GetUniversityApplicationAggregateType<T extends UniversityApplicationAggregateArgs> = {
      [P in keyof T & keyof AggregateUniversityApplication]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUniversityApplication[P]>
    : Prisma.GetScalarType<T[P], AggregateUniversityApplication[P]>
}




export type UniversityApplicationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UniversityApplicationWhereInput
  orderBy?: Prisma.UniversityApplicationOrderByWithAggregationInput | Prisma.UniversityApplicationOrderByWithAggregationInput[]
  by: Prisma.UniversityApplicationScalarFieldEnum[] | Prisma.UniversityApplicationScalarFieldEnum
  having?: Prisma.UniversityApplicationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UniversityApplicationCountAggregateInputType | true
  _avg?: UniversityApplicationAvgAggregateInputType
  _sum?: UniversityApplicationSumAggregateInputType
  _min?: UniversityApplicationMinAggregateInputType
  _max?: UniversityApplicationMaxAggregateInputType
}

export type UniversityApplicationGroupByOutputType = {
  id: number
  firstName: string
  lastName: string
  email: string
  phone: string
  dateOfBirth: Date
  gender: $Enums.Gender
  singleStatus: $Enums.sStatus
  nationality: string
  nID: number
  province: string
  district: string
  sector: string
  cell: string
  village: string
  highSchool: string
  graduationYear: number
  combination: string
  aggregateScore: runtime.Decimal
  desiredUniveristy: string
  father: string
  mother: string
  guardianPhone: number
  relation: $Enums.Relationship
  disability: boolean
  specifyDisability: string | null
  status: $Enums.ApplicationStatus
  createdAt: Date
  _count: UniversityApplicationCountAggregateOutputType | null
  _avg: UniversityApplicationAvgAggregateOutputType | null
  _sum: UniversityApplicationSumAggregateOutputType | null
  _min: UniversityApplicationMinAggregateOutputType | null
  _max: UniversityApplicationMaxAggregateOutputType | null
}

type GetUniversityApplicationGroupByPayload<T extends UniversityApplicationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UniversityApplicationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UniversityApplicationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UniversityApplicationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UniversityApplicationGroupByOutputType[P]>
      }
    >
  >



export type UniversityApplicationWhereInput = {
  AND?: Prisma.UniversityApplicationWhereInput | Prisma.UniversityApplicationWhereInput[]
  OR?: Prisma.UniversityApplicationWhereInput[]
  NOT?: Prisma.UniversityApplicationWhereInput | Prisma.UniversityApplicationWhereInput[]
  id?: Prisma.IntFilter<"UniversityApplication"> | number
  firstName?: Prisma.StringFilter<"UniversityApplication"> | string
  lastName?: Prisma.StringFilter<"UniversityApplication"> | string
  email?: Prisma.StringFilter<"UniversityApplication"> | string
  phone?: Prisma.StringFilter<"UniversityApplication"> | string
  dateOfBirth?: Prisma.DateTimeFilter<"UniversityApplication"> | Date | string
  gender?: Prisma.EnumGenderFilter<"UniversityApplication"> | $Enums.Gender
  singleStatus?: Prisma.EnumsStatusFilter<"UniversityApplication"> | $Enums.sStatus
  nationality?: Prisma.StringFilter<"UniversityApplication"> | string
  nID?: Prisma.IntFilter<"UniversityApplication"> | number
  province?: Prisma.StringFilter<"UniversityApplication"> | string
  district?: Prisma.StringFilter<"UniversityApplication"> | string
  sector?: Prisma.StringFilter<"UniversityApplication"> | string
  cell?: Prisma.StringFilter<"UniversityApplication"> | string
  village?: Prisma.StringFilter<"UniversityApplication"> | string
  highSchool?: Prisma.StringFilter<"UniversityApplication"> | string
  graduationYear?: Prisma.IntFilter<"UniversityApplication"> | number
  combination?: Prisma.StringFilter<"UniversityApplication"> | string
  aggregateScore?: Prisma.DecimalFilter<"UniversityApplication"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  desiredUniveristy?: Prisma.StringFilter<"UniversityApplication"> | string
  father?: Prisma.StringFilter<"UniversityApplication"> | string
  mother?: Prisma.StringFilter<"UniversityApplication"> | string
  guardianPhone?: Prisma.IntFilter<"UniversityApplication"> | number
  relation?: Prisma.EnumRelationshipFilter<"UniversityApplication"> | $Enums.Relationship
  disability?: Prisma.BoolFilter<"UniversityApplication"> | boolean
  specifyDisability?: Prisma.StringNullableFilter<"UniversityApplication"> | string | null
  status?: Prisma.EnumApplicationStatusFilter<"UniversityApplication"> | $Enums.ApplicationStatus
  createdAt?: Prisma.DateTimeFilter<"UniversityApplication"> | Date | string
}

export type UniversityApplicationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  singleStatus?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  nID?: Prisma.SortOrder
  province?: Prisma.SortOrder
  district?: Prisma.SortOrder
  sector?: Prisma.SortOrder
  cell?: Prisma.SortOrder
  village?: Prisma.SortOrder
  highSchool?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  combination?: Prisma.SortOrder
  aggregateScore?: Prisma.SortOrder
  desiredUniveristy?: Prisma.SortOrder
  father?: Prisma.SortOrder
  mother?: Prisma.SortOrder
  guardianPhone?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  disability?: Prisma.SortOrder
  specifyDisability?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _relevance?: Prisma.UniversityApplicationOrderByRelevanceInput
}

export type UniversityApplicationWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.UniversityApplicationWhereInput | Prisma.UniversityApplicationWhereInput[]
  OR?: Prisma.UniversityApplicationWhereInput[]
  NOT?: Prisma.UniversityApplicationWhereInput | Prisma.UniversityApplicationWhereInput[]
  firstName?: Prisma.StringFilter<"UniversityApplication"> | string
  lastName?: Prisma.StringFilter<"UniversityApplication"> | string
  email?: Prisma.StringFilter<"UniversityApplication"> | string
  phone?: Prisma.StringFilter<"UniversityApplication"> | string
  dateOfBirth?: Prisma.DateTimeFilter<"UniversityApplication"> | Date | string
  gender?: Prisma.EnumGenderFilter<"UniversityApplication"> | $Enums.Gender
  singleStatus?: Prisma.EnumsStatusFilter<"UniversityApplication"> | $Enums.sStatus
  nationality?: Prisma.StringFilter<"UniversityApplication"> | string
  nID?: Prisma.IntFilter<"UniversityApplication"> | number
  province?: Prisma.StringFilter<"UniversityApplication"> | string
  district?: Prisma.StringFilter<"UniversityApplication"> | string
  sector?: Prisma.StringFilter<"UniversityApplication"> | string
  cell?: Prisma.StringFilter<"UniversityApplication"> | string
  village?: Prisma.StringFilter<"UniversityApplication"> | string
  highSchool?: Prisma.StringFilter<"UniversityApplication"> | string
  graduationYear?: Prisma.IntFilter<"UniversityApplication"> | number
  combination?: Prisma.StringFilter<"UniversityApplication"> | string
  aggregateScore?: Prisma.DecimalFilter<"UniversityApplication"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  desiredUniveristy?: Prisma.StringFilter<"UniversityApplication"> | string
  father?: Prisma.StringFilter<"UniversityApplication"> | string
  mother?: Prisma.StringFilter<"UniversityApplication"> | string
  guardianPhone?: Prisma.IntFilter<"UniversityApplication"> | number
  relation?: Prisma.EnumRelationshipFilter<"UniversityApplication"> | $Enums.Relationship
  disability?: Prisma.BoolFilter<"UniversityApplication"> | boolean
  specifyDisability?: Prisma.StringNullableFilter<"UniversityApplication"> | string | null
  status?: Prisma.EnumApplicationStatusFilter<"UniversityApplication"> | $Enums.ApplicationStatus
  createdAt?: Prisma.DateTimeFilter<"UniversityApplication"> | Date | string
}, "id">

export type UniversityApplicationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  singleStatus?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  nID?: Prisma.SortOrder
  province?: Prisma.SortOrder
  district?: Prisma.SortOrder
  sector?: Prisma.SortOrder
  cell?: Prisma.SortOrder
  village?: Prisma.SortOrder
  highSchool?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  combination?: Prisma.SortOrder
  aggregateScore?: Prisma.SortOrder
  desiredUniveristy?: Prisma.SortOrder
  father?: Prisma.SortOrder
  mother?: Prisma.SortOrder
  guardianPhone?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  disability?: Prisma.SortOrder
  specifyDisability?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.UniversityApplicationCountOrderByAggregateInput
  _avg?: Prisma.UniversityApplicationAvgOrderByAggregateInput
  _max?: Prisma.UniversityApplicationMaxOrderByAggregateInput
  _min?: Prisma.UniversityApplicationMinOrderByAggregateInput
  _sum?: Prisma.UniversityApplicationSumOrderByAggregateInput
}

export type UniversityApplicationScalarWhereWithAggregatesInput = {
  AND?: Prisma.UniversityApplicationScalarWhereWithAggregatesInput | Prisma.UniversityApplicationScalarWhereWithAggregatesInput[]
  OR?: Prisma.UniversityApplicationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UniversityApplicationScalarWhereWithAggregatesInput | Prisma.UniversityApplicationScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"UniversityApplication"> | number
  firstName?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  lastName?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  email?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  phone?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  dateOfBirth?: Prisma.DateTimeWithAggregatesFilter<"UniversityApplication"> | Date | string
  gender?: Prisma.EnumGenderWithAggregatesFilter<"UniversityApplication"> | $Enums.Gender
  singleStatus?: Prisma.EnumsStatusWithAggregatesFilter<"UniversityApplication"> | $Enums.sStatus
  nationality?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  nID?: Prisma.IntWithAggregatesFilter<"UniversityApplication"> | number
  province?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  district?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  sector?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  cell?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  village?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  highSchool?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  graduationYear?: Prisma.IntWithAggregatesFilter<"UniversityApplication"> | number
  combination?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  aggregateScore?: Prisma.DecimalWithAggregatesFilter<"UniversityApplication"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  desiredUniveristy?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  father?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  mother?: Prisma.StringWithAggregatesFilter<"UniversityApplication"> | string
  guardianPhone?: Prisma.IntWithAggregatesFilter<"UniversityApplication"> | number
  relation?: Prisma.EnumRelationshipWithAggregatesFilter<"UniversityApplication"> | $Enums.Relationship
  disability?: Prisma.BoolWithAggregatesFilter<"UniversityApplication"> | boolean
  specifyDisability?: Prisma.StringNullableWithAggregatesFilter<"UniversityApplication"> | string | null
  status?: Prisma.EnumApplicationStatusWithAggregatesFilter<"UniversityApplication"> | $Enums.ApplicationStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UniversityApplication"> | Date | string
}

export type UniversityApplicationCreateInput = {
  firstName: string
  lastName: string
  email: string
  phone: string
  dateOfBirth: Date | string
  gender?: $Enums.Gender
  singleStatus?: $Enums.sStatus
  nationality: string
  nID: number
  province: string
  district: string
  sector: string
  cell: string
  village: string
  highSchool: string
  graduationYear: number
  combination: string
  aggregateScore: runtime.Decimal | runtime.DecimalJsLike | number | string
  desiredUniveristy: string
  father: string
  mother: string
  guardianPhone: number
  relation?: $Enums.Relationship
  disability?: boolean
  specifyDisability?: string | null
  status?: $Enums.ApplicationStatus
  createdAt?: Date | string
}

export type UniversityApplicationUncheckedCreateInput = {
  id?: number
  firstName: string
  lastName: string
  email: string
  phone: string
  dateOfBirth: Date | string
  gender?: $Enums.Gender
  singleStatus?: $Enums.sStatus
  nationality: string
  nID: number
  province: string
  district: string
  sector: string
  cell: string
  village: string
  highSchool: string
  graduationYear: number
  combination: string
  aggregateScore: runtime.Decimal | runtime.DecimalJsLike | number | string
  desiredUniveristy: string
  father: string
  mother: string
  guardianPhone: number
  relation?: $Enums.Relationship
  disability?: boolean
  specifyDisability?: string | null
  status?: $Enums.ApplicationStatus
  createdAt?: Date | string
}

export type UniversityApplicationUpdateInput = {
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  singleStatus?: Prisma.EnumsStatusFieldUpdateOperationsInput | $Enums.sStatus
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  nID?: Prisma.IntFieldUpdateOperationsInput | number
  province?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  sector?: Prisma.StringFieldUpdateOperationsInput | string
  cell?: Prisma.StringFieldUpdateOperationsInput | string
  village?: Prisma.StringFieldUpdateOperationsInput | string
  highSchool?: Prisma.StringFieldUpdateOperationsInput | string
  graduationYear?: Prisma.IntFieldUpdateOperationsInput | number
  combination?: Prisma.StringFieldUpdateOperationsInput | string
  aggregateScore?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  desiredUniveristy?: Prisma.StringFieldUpdateOperationsInput | string
  father?: Prisma.StringFieldUpdateOperationsInput | string
  mother?: Prisma.StringFieldUpdateOperationsInput | string
  guardianPhone?: Prisma.IntFieldUpdateOperationsInput | number
  relation?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  disability?: Prisma.BoolFieldUpdateOperationsInput | boolean
  specifyDisability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UniversityApplicationUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  singleStatus?: Prisma.EnumsStatusFieldUpdateOperationsInput | $Enums.sStatus
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  nID?: Prisma.IntFieldUpdateOperationsInput | number
  province?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  sector?: Prisma.StringFieldUpdateOperationsInput | string
  cell?: Prisma.StringFieldUpdateOperationsInput | string
  village?: Prisma.StringFieldUpdateOperationsInput | string
  highSchool?: Prisma.StringFieldUpdateOperationsInput | string
  graduationYear?: Prisma.IntFieldUpdateOperationsInput | number
  combination?: Prisma.StringFieldUpdateOperationsInput | string
  aggregateScore?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  desiredUniveristy?: Prisma.StringFieldUpdateOperationsInput | string
  father?: Prisma.StringFieldUpdateOperationsInput | string
  mother?: Prisma.StringFieldUpdateOperationsInput | string
  guardianPhone?: Prisma.IntFieldUpdateOperationsInput | number
  relation?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  disability?: Prisma.BoolFieldUpdateOperationsInput | boolean
  specifyDisability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UniversityApplicationCreateManyInput = {
  id?: number
  firstName: string
  lastName: string
  email: string
  phone: string
  dateOfBirth: Date | string
  gender?: $Enums.Gender
  singleStatus?: $Enums.sStatus
  nationality: string
  nID: number
  province: string
  district: string
  sector: string
  cell: string
  village: string
  highSchool: string
  graduationYear: number
  combination: string
  aggregateScore: runtime.Decimal | runtime.DecimalJsLike | number | string
  desiredUniveristy: string
  father: string
  mother: string
  guardianPhone: number
  relation?: $Enums.Relationship
  disability?: boolean
  specifyDisability?: string | null
  status?: $Enums.ApplicationStatus
  createdAt?: Date | string
}

export type UniversityApplicationUpdateManyMutationInput = {
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  singleStatus?: Prisma.EnumsStatusFieldUpdateOperationsInput | $Enums.sStatus
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  nID?: Prisma.IntFieldUpdateOperationsInput | number
  province?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  sector?: Prisma.StringFieldUpdateOperationsInput | string
  cell?: Prisma.StringFieldUpdateOperationsInput | string
  village?: Prisma.StringFieldUpdateOperationsInput | string
  highSchool?: Prisma.StringFieldUpdateOperationsInput | string
  graduationYear?: Prisma.IntFieldUpdateOperationsInput | number
  combination?: Prisma.StringFieldUpdateOperationsInput | string
  aggregateScore?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  desiredUniveristy?: Prisma.StringFieldUpdateOperationsInput | string
  father?: Prisma.StringFieldUpdateOperationsInput | string
  mother?: Prisma.StringFieldUpdateOperationsInput | string
  guardianPhone?: Prisma.IntFieldUpdateOperationsInput | number
  relation?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  disability?: Prisma.BoolFieldUpdateOperationsInput | boolean
  specifyDisability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UniversityApplicationUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.StringFieldUpdateOperationsInput | string
  dateOfBirth?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  singleStatus?: Prisma.EnumsStatusFieldUpdateOperationsInput | $Enums.sStatus
  nationality?: Prisma.StringFieldUpdateOperationsInput | string
  nID?: Prisma.IntFieldUpdateOperationsInput | number
  province?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  sector?: Prisma.StringFieldUpdateOperationsInput | string
  cell?: Prisma.StringFieldUpdateOperationsInput | string
  village?: Prisma.StringFieldUpdateOperationsInput | string
  highSchool?: Prisma.StringFieldUpdateOperationsInput | string
  graduationYear?: Prisma.IntFieldUpdateOperationsInput | number
  combination?: Prisma.StringFieldUpdateOperationsInput | string
  aggregateScore?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  desiredUniveristy?: Prisma.StringFieldUpdateOperationsInput | string
  father?: Prisma.StringFieldUpdateOperationsInput | string
  mother?: Prisma.StringFieldUpdateOperationsInput | string
  guardianPhone?: Prisma.IntFieldUpdateOperationsInput | number
  relation?: Prisma.EnumRelationshipFieldUpdateOperationsInput | $Enums.Relationship
  disability?: Prisma.BoolFieldUpdateOperationsInput | boolean
  specifyDisability?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UniversityApplicationOrderByRelevanceInput = {
  fields: Prisma.UniversityApplicationOrderByRelevanceFieldEnum | Prisma.UniversityApplicationOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type UniversityApplicationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  singleStatus?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  nID?: Prisma.SortOrder
  province?: Prisma.SortOrder
  district?: Prisma.SortOrder
  sector?: Prisma.SortOrder
  cell?: Prisma.SortOrder
  village?: Prisma.SortOrder
  highSchool?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  combination?: Prisma.SortOrder
  aggregateScore?: Prisma.SortOrder
  desiredUniveristy?: Prisma.SortOrder
  father?: Prisma.SortOrder
  mother?: Prisma.SortOrder
  guardianPhone?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  disability?: Prisma.SortOrder
  specifyDisability?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type UniversityApplicationAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nID?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  aggregateScore?: Prisma.SortOrder
  guardianPhone?: Prisma.SortOrder
}

export type UniversityApplicationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  singleStatus?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  nID?: Prisma.SortOrder
  province?: Prisma.SortOrder
  district?: Prisma.SortOrder
  sector?: Prisma.SortOrder
  cell?: Prisma.SortOrder
  village?: Prisma.SortOrder
  highSchool?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  combination?: Prisma.SortOrder
  aggregateScore?: Prisma.SortOrder
  desiredUniveristy?: Prisma.SortOrder
  father?: Prisma.SortOrder
  mother?: Prisma.SortOrder
  guardianPhone?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  disability?: Prisma.SortOrder
  specifyDisability?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type UniversityApplicationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  dateOfBirth?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  singleStatus?: Prisma.SortOrder
  nationality?: Prisma.SortOrder
  nID?: Prisma.SortOrder
  province?: Prisma.SortOrder
  district?: Prisma.SortOrder
  sector?: Prisma.SortOrder
  cell?: Prisma.SortOrder
  village?: Prisma.SortOrder
  highSchool?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  combination?: Prisma.SortOrder
  aggregateScore?: Prisma.SortOrder
  desiredUniveristy?: Prisma.SortOrder
  father?: Prisma.SortOrder
  mother?: Prisma.SortOrder
  guardianPhone?: Prisma.SortOrder
  relation?: Prisma.SortOrder
  disability?: Prisma.SortOrder
  specifyDisability?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type UniversityApplicationSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nID?: Prisma.SortOrder
  graduationYear?: Prisma.SortOrder
  aggregateScore?: Prisma.SortOrder
  guardianPhone?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type EnumGenderFieldUpdateOperationsInput = {
  set?: $Enums.Gender
}

export type EnumsStatusFieldUpdateOperationsInput = {
  set?: $Enums.sStatus
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type EnumRelationshipFieldUpdateOperationsInput = {
  set?: $Enums.Relationship
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type EnumApplicationStatusFieldUpdateOperationsInput = {
  set?: $Enums.ApplicationStatus
}



export type UniversityApplicationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  phone?: boolean
  dateOfBirth?: boolean
  gender?: boolean
  singleStatus?: boolean
  nationality?: boolean
  nID?: boolean
  province?: boolean
  district?: boolean
  sector?: boolean
  cell?: boolean
  village?: boolean
  highSchool?: boolean
  graduationYear?: boolean
  combination?: boolean
  aggregateScore?: boolean
  desiredUniveristy?: boolean
  father?: boolean
  mother?: boolean
  guardianPhone?: boolean
  relation?: boolean
  disability?: boolean
  specifyDisability?: boolean
  status?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["universityApplication"]>



export type UniversityApplicationSelectScalar = {
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  phone?: boolean
  dateOfBirth?: boolean
  gender?: boolean
  singleStatus?: boolean
  nationality?: boolean
  nID?: boolean
  province?: boolean
  district?: boolean
  sector?: boolean
  cell?: boolean
  village?: boolean
  highSchool?: boolean
  graduationYear?: boolean
  combination?: boolean
  aggregateScore?: boolean
  desiredUniveristy?: boolean
  father?: boolean
  mother?: boolean
  guardianPhone?: boolean
  relation?: boolean
  disability?: boolean
  specifyDisability?: boolean
  status?: boolean
  createdAt?: boolean
}

export type UniversityApplicationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "phone" | "dateOfBirth" | "gender" | "singleStatus" | "nationality" | "nID" | "province" | "district" | "sector" | "cell" | "village" | "highSchool" | "graduationYear" | "combination" | "aggregateScore" | "desiredUniveristy" | "father" | "mother" | "guardianPhone" | "relation" | "disability" | "specifyDisability" | "status" | "createdAt", ExtArgs["result"]["universityApplication"]>

export type $UniversityApplicationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UniversityApplication"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    firstName: string
    lastName: string
    email: string
    phone: string
    dateOfBirth: Date
    gender: $Enums.Gender
    singleStatus: $Enums.sStatus
    nationality: string
    nID: number
    province: string
    district: string
    sector: string
    cell: string
    village: string
    highSchool: string
    graduationYear: number
    combination: string
    aggregateScore: runtime.Decimal
    desiredUniveristy: string
    father: string
    mother: string
    guardianPhone: number
    relation: $Enums.Relationship
    disability: boolean
    specifyDisability: string | null
    status: $Enums.ApplicationStatus
    createdAt: Date
  }, ExtArgs["result"]["universityApplication"]>
  composites: {}
}

export type UniversityApplicationGetPayload<S extends boolean | null | undefined | UniversityApplicationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UniversityApplicationPayload, S>

export type UniversityApplicationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UniversityApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UniversityApplicationCountAggregateInputType | true
  }

export interface UniversityApplicationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UniversityApplication'], meta: { name: 'UniversityApplication' } }
  /**
   * Find zero or one UniversityApplication that matches the filter.
   * @param {UniversityApplicationFindUniqueArgs} args - Arguments to find a UniversityApplication
   * @example
   * // Get one UniversityApplication
   * const universityApplication = await prisma.universityApplication.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UniversityApplicationFindUniqueArgs>(args: Prisma.SelectSubset<T, UniversityApplicationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UniversityApplicationClient<runtime.Types.Result.GetResult<Prisma.$UniversityApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UniversityApplication that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UniversityApplicationFindUniqueOrThrowArgs} args - Arguments to find a UniversityApplication
   * @example
   * // Get one UniversityApplication
   * const universityApplication = await prisma.universityApplication.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UniversityApplicationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UniversityApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UniversityApplicationClient<runtime.Types.Result.GetResult<Prisma.$UniversityApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UniversityApplication that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UniversityApplicationFindFirstArgs} args - Arguments to find a UniversityApplication
   * @example
   * // Get one UniversityApplication
   * const universityApplication = await prisma.universityApplication.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UniversityApplicationFindFirstArgs>(args?: Prisma.SelectSubset<T, UniversityApplicationFindFirstArgs<ExtArgs>>): Prisma.Prisma__UniversityApplicationClient<runtime.Types.Result.GetResult<Prisma.$UniversityApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UniversityApplication that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UniversityApplicationFindFirstOrThrowArgs} args - Arguments to find a UniversityApplication
   * @example
   * // Get one UniversityApplication
   * const universityApplication = await prisma.universityApplication.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UniversityApplicationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UniversityApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UniversityApplicationClient<runtime.Types.Result.GetResult<Prisma.$UniversityApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UniversityApplications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UniversityApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UniversityApplications
   * const universityApplications = await prisma.universityApplication.findMany()
   * 
   * // Get first 10 UniversityApplications
   * const universityApplications = await prisma.universityApplication.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const universityApplicationWithIdOnly = await prisma.universityApplication.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UniversityApplicationFindManyArgs>(args?: Prisma.SelectSubset<T, UniversityApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UniversityApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UniversityApplication.
   * @param {UniversityApplicationCreateArgs} args - Arguments to create a UniversityApplication.
   * @example
   * // Create one UniversityApplication
   * const UniversityApplication = await prisma.universityApplication.create({
   *   data: {
   *     // ... data to create a UniversityApplication
   *   }
   * })
   * 
   */
  create<T extends UniversityApplicationCreateArgs>(args: Prisma.SelectSubset<T, UniversityApplicationCreateArgs<ExtArgs>>): Prisma.Prisma__UniversityApplicationClient<runtime.Types.Result.GetResult<Prisma.$UniversityApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UniversityApplications.
   * @param {UniversityApplicationCreateManyArgs} args - Arguments to create many UniversityApplications.
   * @example
   * // Create many UniversityApplications
   * const universityApplication = await prisma.universityApplication.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UniversityApplicationCreateManyArgs>(args?: Prisma.SelectSubset<T, UniversityApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a UniversityApplication.
   * @param {UniversityApplicationDeleteArgs} args - Arguments to delete one UniversityApplication.
   * @example
   * // Delete one UniversityApplication
   * const UniversityApplication = await prisma.universityApplication.delete({
   *   where: {
   *     // ... filter to delete one UniversityApplication
   *   }
   * })
   * 
   */
  delete<T extends UniversityApplicationDeleteArgs>(args: Prisma.SelectSubset<T, UniversityApplicationDeleteArgs<ExtArgs>>): Prisma.Prisma__UniversityApplicationClient<runtime.Types.Result.GetResult<Prisma.$UniversityApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UniversityApplication.
   * @param {UniversityApplicationUpdateArgs} args - Arguments to update one UniversityApplication.
   * @example
   * // Update one UniversityApplication
   * const universityApplication = await prisma.universityApplication.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UniversityApplicationUpdateArgs>(args: Prisma.SelectSubset<T, UniversityApplicationUpdateArgs<ExtArgs>>): Prisma.Prisma__UniversityApplicationClient<runtime.Types.Result.GetResult<Prisma.$UniversityApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UniversityApplications.
   * @param {UniversityApplicationDeleteManyArgs} args - Arguments to filter UniversityApplications to delete.
   * @example
   * // Delete a few UniversityApplications
   * const { count } = await prisma.universityApplication.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UniversityApplicationDeleteManyArgs>(args?: Prisma.SelectSubset<T, UniversityApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UniversityApplications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UniversityApplicationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UniversityApplications
   * const universityApplication = await prisma.universityApplication.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UniversityApplicationUpdateManyArgs>(args: Prisma.SelectSubset<T, UniversityApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one UniversityApplication.
   * @param {UniversityApplicationUpsertArgs} args - Arguments to update or create a UniversityApplication.
   * @example
   * // Update or create a UniversityApplication
   * const universityApplication = await prisma.universityApplication.upsert({
   *   create: {
   *     // ... data to create a UniversityApplication
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UniversityApplication we want to update
   *   }
   * })
   */
  upsert<T extends UniversityApplicationUpsertArgs>(args: Prisma.SelectSubset<T, UniversityApplicationUpsertArgs<ExtArgs>>): Prisma.Prisma__UniversityApplicationClient<runtime.Types.Result.GetResult<Prisma.$UniversityApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UniversityApplications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UniversityApplicationCountArgs} args - Arguments to filter UniversityApplications to count.
   * @example
   * // Count the number of UniversityApplications
   * const count = await prisma.universityApplication.count({
   *   where: {
   *     // ... the filter for the UniversityApplications we want to count
   *   }
   * })
  **/
  count<T extends UniversityApplicationCountArgs>(
    args?: Prisma.Subset<T, UniversityApplicationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UniversityApplicationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UniversityApplication.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UniversityApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UniversityApplicationAggregateArgs>(args: Prisma.Subset<T, UniversityApplicationAggregateArgs>): Prisma.PrismaPromise<GetUniversityApplicationAggregateType<T>>

  /**
   * Group by UniversityApplication.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UniversityApplicationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UniversityApplicationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UniversityApplicationGroupByArgs['orderBy'] }
      : { orderBy?: UniversityApplicationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UniversityApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUniversityApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UniversityApplication model
 */
readonly fields: UniversityApplicationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UniversityApplication.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UniversityApplicationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UniversityApplication model
 */
export interface UniversityApplicationFieldRefs {
  readonly id: Prisma.FieldRef<"UniversityApplication", 'Int'>
  readonly firstName: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly lastName: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly email: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly phone: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly dateOfBirth: Prisma.FieldRef<"UniversityApplication", 'DateTime'>
  readonly gender: Prisma.FieldRef<"UniversityApplication", 'Gender'>
  readonly singleStatus: Prisma.FieldRef<"UniversityApplication", 'sStatus'>
  readonly nationality: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly nID: Prisma.FieldRef<"UniversityApplication", 'Int'>
  readonly province: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly district: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly sector: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly cell: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly village: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly highSchool: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly graduationYear: Prisma.FieldRef<"UniversityApplication", 'Int'>
  readonly combination: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly aggregateScore: Prisma.FieldRef<"UniversityApplication", 'Decimal'>
  readonly desiredUniveristy: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly father: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly mother: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly guardianPhone: Prisma.FieldRef<"UniversityApplication", 'Int'>
  readonly relation: Prisma.FieldRef<"UniversityApplication", 'Relationship'>
  readonly disability: Prisma.FieldRef<"UniversityApplication", 'Boolean'>
  readonly specifyDisability: Prisma.FieldRef<"UniversityApplication", 'String'>
  readonly status: Prisma.FieldRef<"UniversityApplication", 'ApplicationStatus'>
  readonly createdAt: Prisma.FieldRef<"UniversityApplication", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UniversityApplication findUnique
 */
export type UniversityApplicationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UniversityApplication
   */
  select?: Prisma.UniversityApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UniversityApplication
   */
  omit?: Prisma.UniversityApplicationOmit<ExtArgs> | null
  /**
   * Filter, which UniversityApplication to fetch.
   */
  where: Prisma.UniversityApplicationWhereUniqueInput
}

/**
 * UniversityApplication findUniqueOrThrow
 */
export type UniversityApplicationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UniversityApplication
   */
  select?: Prisma.UniversityApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UniversityApplication
   */
  omit?: Prisma.UniversityApplicationOmit<ExtArgs> | null
  /**
   * Filter, which UniversityApplication to fetch.
   */
  where: Prisma.UniversityApplicationWhereUniqueInput
}

/**
 * UniversityApplication findFirst
 */
export type UniversityApplicationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UniversityApplication
   */
  select?: Prisma.UniversityApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UniversityApplication
   */
  omit?: Prisma.UniversityApplicationOmit<ExtArgs> | null
  /**
   * Filter, which UniversityApplication to fetch.
   */
  where?: Prisma.UniversityApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UniversityApplications to fetch.
   */
  orderBy?: Prisma.UniversityApplicationOrderByWithRelationInput | Prisma.UniversityApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UniversityApplications.
   */
  cursor?: Prisma.UniversityApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UniversityApplications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UniversityApplications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UniversityApplications.
   */
  distinct?: Prisma.UniversityApplicationScalarFieldEnum | Prisma.UniversityApplicationScalarFieldEnum[]
}

/**
 * UniversityApplication findFirstOrThrow
 */
export type UniversityApplicationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UniversityApplication
   */
  select?: Prisma.UniversityApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UniversityApplication
   */
  omit?: Prisma.UniversityApplicationOmit<ExtArgs> | null
  /**
   * Filter, which UniversityApplication to fetch.
   */
  where?: Prisma.UniversityApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UniversityApplications to fetch.
   */
  orderBy?: Prisma.UniversityApplicationOrderByWithRelationInput | Prisma.UniversityApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UniversityApplications.
   */
  cursor?: Prisma.UniversityApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UniversityApplications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UniversityApplications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UniversityApplications.
   */
  distinct?: Prisma.UniversityApplicationScalarFieldEnum | Prisma.UniversityApplicationScalarFieldEnum[]
}

/**
 * UniversityApplication findMany
 */
export type UniversityApplicationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UniversityApplication
   */
  select?: Prisma.UniversityApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UniversityApplication
   */
  omit?: Prisma.UniversityApplicationOmit<ExtArgs> | null
  /**
   * Filter, which UniversityApplications to fetch.
   */
  where?: Prisma.UniversityApplicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UniversityApplications to fetch.
   */
  orderBy?: Prisma.UniversityApplicationOrderByWithRelationInput | Prisma.UniversityApplicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UniversityApplications.
   */
  cursor?: Prisma.UniversityApplicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UniversityApplications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UniversityApplications.
   */
  skip?: number
  distinct?: Prisma.UniversityApplicationScalarFieldEnum | Prisma.UniversityApplicationScalarFieldEnum[]
}

/**
 * UniversityApplication create
 */
export type UniversityApplicationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UniversityApplication
   */
  select?: Prisma.UniversityApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UniversityApplication
   */
  omit?: Prisma.UniversityApplicationOmit<ExtArgs> | null
  /**
   * The data needed to create a UniversityApplication.
   */
  data: Prisma.XOR<Prisma.UniversityApplicationCreateInput, Prisma.UniversityApplicationUncheckedCreateInput>
}

/**
 * UniversityApplication createMany
 */
export type UniversityApplicationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UniversityApplications.
   */
  data: Prisma.UniversityApplicationCreateManyInput | Prisma.UniversityApplicationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UniversityApplication update
 */
export type UniversityApplicationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UniversityApplication
   */
  select?: Prisma.UniversityApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UniversityApplication
   */
  omit?: Prisma.UniversityApplicationOmit<ExtArgs> | null
  /**
   * The data needed to update a UniversityApplication.
   */
  data: Prisma.XOR<Prisma.UniversityApplicationUpdateInput, Prisma.UniversityApplicationUncheckedUpdateInput>
  /**
   * Choose, which UniversityApplication to update.
   */
  where: Prisma.UniversityApplicationWhereUniqueInput
}

/**
 * UniversityApplication updateMany
 */
export type UniversityApplicationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UniversityApplications.
   */
  data: Prisma.XOR<Prisma.UniversityApplicationUpdateManyMutationInput, Prisma.UniversityApplicationUncheckedUpdateManyInput>
  /**
   * Filter which UniversityApplications to update
   */
  where?: Prisma.UniversityApplicationWhereInput
  /**
   * Limit how many UniversityApplications to update.
   */
  limit?: number
}

/**
 * UniversityApplication upsert
 */
export type UniversityApplicationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UniversityApplication
   */
  select?: Prisma.UniversityApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UniversityApplication
   */
  omit?: Prisma.UniversityApplicationOmit<ExtArgs> | null
  /**
   * The filter to search for the UniversityApplication to update in case it exists.
   */
  where: Prisma.UniversityApplicationWhereUniqueInput
  /**
   * In case the UniversityApplication found by the `where` argument doesn't exist, create a new UniversityApplication with this data.
   */
  create: Prisma.XOR<Prisma.UniversityApplicationCreateInput, Prisma.UniversityApplicationUncheckedCreateInput>
  /**
   * In case the UniversityApplication was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UniversityApplicationUpdateInput, Prisma.UniversityApplicationUncheckedUpdateInput>
}

/**
 * UniversityApplication delete
 */
export type UniversityApplicationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UniversityApplication
   */
  select?: Prisma.UniversityApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UniversityApplication
   */
  omit?: Prisma.UniversityApplicationOmit<ExtArgs> | null
  /**
   * Filter which UniversityApplication to delete.
   */
  where: Prisma.UniversityApplicationWhereUniqueInput
}

/**
 * UniversityApplication deleteMany
 */
export type UniversityApplicationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UniversityApplications to delete
   */
  where?: Prisma.UniversityApplicationWhereInput
  /**
   * Limit how many UniversityApplications to delete.
   */
  limit?: number
}

/**
 * UniversityApplication without action
 */
export type UniversityApplicationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UniversityApplication
   */
  select?: Prisma.UniversityApplicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UniversityApplication
   */
  omit?: Prisma.UniversityApplicationOmit<ExtArgs> | null
}
